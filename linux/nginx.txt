Como aumentar o número de conexões no nginx.

Editar em /etc/systemd/multi-user.target.wants/nginx.service

Adicionar abaixo da seção:

[Service] 
LimitNOFILE=65535000 
#EOF
# -------------------------------------------------
# Editar no sites-enable/default:

# Aumentar N. conexões (pode ter que ser colocado em nginx.conf ou /etc/nginx/conf.d/params.conf)
#events {
#    #worker_connections  1024;
#    worker_connections  65535; #Aumentar
#    multi_accept on;
#}

# Aumenta buffers e tamanho de arquivos que NGINX consegue entregar
#proxy_buffer_size 51200k;
#proxy_buffers 4 102400k;
#proxy_busy_buffers_size 102400k;
#client_max_body_size 40000M; 

##Apenas ativar SSL em /etc/nginx/sites-enabled/default  
##80 redireciona pra 443 ssl
#Server {
#        listen 80;
#        #listen [::]:80;
#        return 301 https://$host$request_uri;
#}

server {
       #listen 80 default_server;
       #listen [::]:80 default_server;

# Ativa compactação automática de html
#	gzip on;
#	gzip_vary on;
#	gzip_min_length 10240;
#	gzip_proxied expired no-cache no-store private auth;
#	gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml;
#	gzip_disable "MSIE [1-6]\.";

       # SSL configuration
       #
       listen 443 ssl;
       #listen [::]:443 ssl;

       #ssl_protocols TLSv1.2 TLSv1.3; # compatibilidade
       ssl_protocols TLSv1.3; # ideal
       ssl_ciphers HIGH:!aNULL:!MD5;
       #testar: nmap --script ssl-enum-ciphers -p 443 localhost

       add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
       #testar: nmap -sV -–script=http-headers -p 80,443 localhost

       ssl_certificate /etc/letsencrypt/live/localizaracmanager.visual.com.br/fullchain.pem;
       ssl_certificate_key /etc/letsencrypt/live/localizaracmanager.visual.com.br/privkey.pem;

       root /var/www/html;
       index index.html index.htm;

       #Redireciona tudo inclusive websocket
       location / {
               proxy_pass http://localhost:8080;
               proxy_http_version 1.1;
               proxy_set_header Upgrade $http_upgrade;
               proxy_set_header Connection "Upgrade";
               proxy_set_header Host $host;
       }
}
#EOF
#---------------------------------------------------------------------------------------

# /etc/nginx/conf.d/load-balancer.conf
# Fail over - Se cai um, usa outro

upstream backend {
   server 187.108.198.217 max_fails=1 fail_timeout=15s; 
   server 187.108.198.152;
}

server {
   listen 192.168.0.11:80 ssl;
   root /var/www/html;

   location / {

   }

   location /logs {
      root /var/log ;
   }

	 location /admin {
      proxy_pass http://aplicacao.visual.com.br/adm ;
	 }
}

server {
   listen 127.0.0.1:80; 

   location / {
      proxy_pass http://192.168.0.123;
   }
}

server {
   listen 80; 

   location / {
      proxy_pass http://backend;
   }
}
##################################################################
#Redirect HTTP to HTTPS for all sites
server {
	listen 80;
  #listen [::]:80;
	return 301 https://$host$request_uri;
}
server {
        listen 443 ssl;
        ssl_certificate /etc/letsencrypt/live/YOUR-DOMAIN/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/YOUR-DOMAIN/privkey.pem;

				#convert .p12 em .pem :
				#openssl pkcs12 -in cert_comprado.p12 -out fullchain.pem -clcerts -nokeys
        #openssl pkcs12 -in cert_comprado.p12 -out privkey.pem -nocerts -nodes

#...
# um monte de configs
}

# ref: https://stackoverflow.com/questions/15144046/converting-pkcs12-certificate-into-pem-using-openssl
# openssl pkcs12 -in path.p12 -out newfile.crt.pem -clcerts -nokeys
# openssl pkcs12 -in path.p12 -out newfile.key.pem -nocerts -nodes
# After that you have:
# 
# certificate in newfile.crt.pem
# private key in newfile.key.pem
# To put the certificate and key in the same file without a password, use the following, as an empty password will cause the key to not be exported:
# 
# openssl pkcs12 -in path.p12 -out newfile.pem -nodes
# Or, if you want to provide a password for the private key, omit -nodes and input a password:
# 
# openssl pkcs12 -in path.p12 -out newfile.pem
# If you need to input the PKCS#12 password directly from the command line (e.g. a script), just add -passin pass:${PASSWORD}:
# 
# openssl pkcs12 -in path.p12 -out newfile.crt.pem -clcerts -nokeys -passin 'pass:P@s5w0rD'
# 




#########################################
# WebSocket, REST e outros "protocolos gambiarra"

location /wsapp/ {
    proxy_pass http://wsbackend;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";
    proxy_set_header Host $host;
}

gzip

gzip on;
gzip_vary on;
gzip_min_length 10240;
gzip_proxied expired no-cache no-store private auth;
gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml;
gzip_disable "MSIE [1-6]\.";

# ref:https://www.nginx.com/blog/creating-nginx-rewrite-rules/
# Aqui está um exemplo de regra de reescrita do NGINX que usa a rewritediretiva.
# Ele corresponde a URLs que começam com a string /download/ e, em seguida, incluem o 
# diretório /media/ ou /audio/ em algum lugar posteriormente no caminho. 
# Ele substitui esses elementos por /mp3/ e adiciona a extensão de arquivo apropriada, .mp3 ou .ra. 
# As variáveis $1e $2capturam os elementos do caminho que não estão mudando. 
# Por exemplo, /download/cdn-west/media/file1 se torna /download/cdn-west/mp3/file1.mp3 .
# Se houver uma extensão no nome do arquivo (como .flv), a expressão a remove e a substitui por .mp3 .
# server {
#     # ...
#     rewrite ^(/download/.*)/media/(\w+)\.?.*$ $1/mp3/$2.mp3 last;
#     rewrite ^(/download/.*)/audio/(\w+)\.?.*$ $1/mp3/$2.ra  last;
#     return  403;
#     # ...
# }
#
# remove /component de http:exemplo.com/component/coisa/coisa2/etc
# rewrite ^/component(.*)$ $1 last;

